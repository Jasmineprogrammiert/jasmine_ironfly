{"ast":null,"code":"var _jsxFileName = \"/Users/jasminezeng/Downloads/jasmine_ironfly/my-app/src/pages/Minesweeper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Component for each cell in the board\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  value,\n  onClick,\n  onRightClick\n}) => {\n  const handleClick = e => {\n    e.preventDefault();\n    onClick();\n  };\n  const handleContextMenu = e => {\n    e.preventDefault();\n    onRightClick();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cell ${value === 'X' ? 'mine' : ''}`,\n    onClick: handleClick,\n    onContextMenu: handleContextMenu,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n// Component for the Minesweeper game\n_c = Cell;\nconst Minesweeper = ({\n  width,\n  height,\n  mineCount\n}) => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create the initial board\n  useEffect(() => {\n    const createBoard = () => {\n      const newBoard = [];\n      for (let i = 0; i < height; i++) {\n        const row = [];\n        for (let j = 0; j < width; j++) {\n          row.push({\n            x: j,\n            y: i,\n            value: 0,\n            revealed: false,\n            flagged: false\n          });\n        }\n        newBoard.push(row);\n      }\n      return newBoard;\n    };\n    const placeMines = board => {\n      let minesPlaced = 0;\n      while (minesPlaced < mineCount) {\n        const x = Math.floor(Math.random() * width);\n        const y = Math.floor(Math.random() * height);\n        if (board[y][x].value !== 'X') {\n          board[y][x].value = 'X';\n          minesPlaced++;\n        }\n      }\n      return board;\n    };\n    const calculateNumbers = board => {\n      for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n          if (board[i][j].value !== 'X') {\n            let count = 0;\n            for (let dx = -1; dx <= 1; dx++) {\n              for (let dy = -1; dy <= 1; dy++) {\n                if (i + dy >= 0 && i + dy < height && j + dx >= 0 && j + dx < width && board[i + dy][j + dx].value === 'X') {\n                  count++;\n                }\n              }\n            }\n            board[i][j].value = count;\n          }\n        }\n      }\n    };\n    const newBoard = createBoard();\n    const boardWithMines = placeMines(newBoard);\n    calculateNumbers(boardWithMines);\n    setBoard(boardWithMines);\n  }, []);\n\n  // Handle cell click\n  const handleCellClick = cell => {\n    if (cell.flagged || gameOver) return;\n    const newBoard = [...board];\n    const {\n      x,\n      y\n    } = cell;\n    if (cell.value === 'X') {\n      // Game over\n      newBoard[y][x].revealed = true;\n      setBoard(newBoard);\n      setGameOver(true);\n      alert('Game over!');\n    } else {\n      // Reveal empty cells\n      const reveal = (x, y) => {\n        if (x < 0 || x >= width || y < 0 || y >= height) return;\n        const cell = newBoard[y][x];\n        if (cell.revealed) return;\n        newBoard[y][x].revealed = true;\n        if (cell.value === 0) {\n          reveal(x - 1, y - 1);\n          reveal(x, y - 1);\n          reveal(x + 1, y - 1);\n          reveal(x - 1, y);\n          reveal(x + 1, y);\n          reveal(x - 1, y + 1);\n          reveal(x, y + 1);\n          reveal(x + 1, y + 1);\n        }\n      };\n      reveal(x, y);\n      setBoard(newBoard);\n    }\n  };\n\n  // Handle cell right-click (flagging)\n  const handleCellRightClick = (e, cell) => {\n    e.preventDefault();\n    if (gameOver) return;\n    const newBoard = [...board];\n    const {\n      x,\n      y\n    } = cell;\n    newBoard[y][x].flagged = !newBoard[y][x].flagged;\n    setBoard(newBoard);\n  };\n\n  // Render the board\n  const renderBoard = () => {\n    return board.map(row => {\n      return row.map(cell => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          value: cell.revealed ? cell.value : '',\n          onClick: () => handleCellClick(cell),\n          onRightClick: e => handleCellRightClick(e, cell)\n        }, `${cell.x}-${cell.y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this);\n      });\n    });\n  };\n\n  // Start a new game\n  const handleNewGame = () => {\n    setGameOver(false);\n    setBoard([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(Minesweeper, \"iUIvz4I/fRw3StpU2mnAOnwcVOM=\");\n_c2 = Minesweeper;\nexport default Minesweeper;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Minesweeper\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Cell","value","onClick","onRightClick","handleClick","e","preventDefault","handleContextMenu","className","onContextMenu","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Minesweeper","width","height","mineCount","_s","board","setBoard","gameOver","setGameOver","createBoard","newBoard","i","row","j","push","x","y","revealed","flagged","placeMines","minesPlaced","Math","floor","random","calculateNumbers","count","dx","dy","boardWithMines","handleCellClick","cell","alert","reveal","handleCellRightClick","renderBoard","map","handleNewGame","_c2","$RefreshReg$"],"sources":["/Users/jasminezeng/Downloads/jasmine_ironfly/my-app/src/pages/Minesweeper.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Component for each cell in the board\nconst Cell = ({ value, onClick, onRightClick }) => {\n  const handleClick = (e) => {\n    e.preventDefault();\n    onClick();\n  };\n\n  const handleContextMenu = (e) => {\n    e.preventDefault();\n    onRightClick();\n  };\n\n  return (\n    <div\n      className={`cell ${value === 'X' ? 'mine' : ''}`}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {value}\n    </div>\n  );\n};\n\n// Component for the Minesweeper game\nconst Minesweeper = ({ width, height, mineCount }) => {\n  const [board, setBoard] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create the initial board\n  useEffect(() => {\n    const createBoard = () => {\n      const newBoard = [];\n      for (let i = 0; i < height; i++) {\n        const row = [];\n        for (let j = 0; j < width; j++) {\n          row.push({ x: j, y: i, value: 0, revealed: false, flagged: false });\n        }\n        newBoard.push(row);\n      }\n      return newBoard;\n    };\n\n    const placeMines = (board) => {\n      let minesPlaced = 0;\n      while (minesPlaced < mineCount) {\n        const x = Math.floor(Math.random() * width);\n        const y = Math.floor(Math.random() * height);\n        if (board[y][x].value !== 'X') {\n          board[y][x].value = 'X';\n          minesPlaced++;\n        }\n      }\n      return board;\n    };\n\n    const calculateNumbers = (board) => {\n      for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n          if (board[i][j].value !== 'X') {\n            let count = 0;\n            for (let dx = -1; dx <= 1; dx++) {\n              for (let dy = -1; dy <= 1; dy++) {\n                if (\n                  i + dy >= 0 &&\n                  i + dy < height &&\n                  j + dx >= 0 &&\n                  j + dx < width &&\n                  board[i + dy][j + dx].value === 'X'\n                ) {\n                  count++;\n                }\n              }\n            }\n            board[i][j].value = count;\n          }\n        }\n      }\n    };\n\n    const newBoard = createBoard();\n    const boardWithMines = placeMines(newBoard);\n    calculateNumbers(boardWithMines);\n    setBoard(boardWithMines);\n  }, []);\n\n  // Handle cell click\n  const handleCellClick = (cell) => {\n    if (cell.flagged || gameOver) return;\n    const newBoard = [...board];\n    const { x, y } = cell;\n\n    if (cell.value === 'X') {\n      // Game over\n      newBoard[y][x].revealed = true;\n      setBoard(newBoard);\n      setGameOver(true);\n      alert('Game over!');\n    } else {\n      // Reveal empty cells\n      const reveal = (x, y) => {\n        if (x < 0 || x >= width || y < 0 || y >= height) return;\n        const cell = newBoard[y][x];\n        if (cell.revealed) return;\n        newBoard[y][x].revealed = true;\n        if (cell.value === 0) {\n          reveal(x - 1, y - 1);\n          reveal(x, y - 1);\n          reveal(x + 1, y - 1);\n          reveal(x - 1, y);\n          reveal(x + 1, y);\n          reveal(x - 1, y + 1);\n          reveal(x, y + 1);\n          reveal(x + 1, y + 1);\n        }\n      };\n\n      reveal(x, y);\n      setBoard(newBoard);\n    }\n  };\n\n  // Handle cell right-click (flagging)\n  const handleCellRightClick = (e, cell) => {\n    e.preventDefault();\n    if (gameOver) return;\n    const newBoard = [...board];\n    const { x, y } = cell;\n    newBoard[y][x].flagged = !newBoard[y][x].flagged;\n    setBoard(newBoard);\n  };\n\n  // Render the board\n  const renderBoard = () => {\n    return board.map((row) => {\n      return row.map((cell) => {\n        return (\n          <Cell\n            key={`${cell.x}-${cell.y}`}\n            value={cell.revealed ? cell.value : ''}\n            onClick={() => handleCellClick(cell)}\n            onRightClick={(e) => handleCellRightClick(e, cell)}\n          />\n        );\n      });\n    });\n  };\n\n  // Start a new game\n  const handleNewGame = () => {\n    setGameOver(false);\n    setBoard([]);\n  };\n\n  return (\n    <div>\n      <div className=\"board\">{renderBoard()}</div>\n      <button onClick={handleNewGame}>New Game</button>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}