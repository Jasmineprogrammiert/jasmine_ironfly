{"ast":null,"code":"var _jsxFileName = \"/Users/jasminezeng/Downloads/jasmine_ironfly/my-app/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"./Cell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(props) {\n  _s();\n  const [grid, setGrid] = useState(getInitialState());\n  function getInitialState() {\n    return {\n      grid: createNewBoard(),\n      minesCount: props.mines,\n      gameStatus: props.gameStatus,\n      revealedCells: 0\n    };\n  }\n\n  // Board utilities\n  function createNewBoard(click = null) {\n    const grid = [];\n    const rows = props.width;\n    const columns = props.height;\n    const minesCount = props.mines;\n    const minesArray = getRandomMines(minesCount, columns, rows, click);\n    for (let i = 0; i < columns; ++i) {\n      grid.push([]);\n      for (let j = 0; j < rows; ++j) {\n        const gridCell = new GridCell(i, j, minesArray.includes(i * rows + j));\n        addGridCell(grid, gridCell);\n      }\n    }\n    return grid;\n  }\n  function getRandomMines(amount, columns, rows, starter = null) {\n    const minesArray = [];\n    const limit = columns * rows;\n    const minesPool = [...Array(limit).keys()];\n    if (starter > 0 && starter < limit) {\n      minesPool.splice(starter, 1);\n    }\n    for (let i = 0; i < amount; ++i) {\n      const n = Math.floor(Math.random() * minesPool.length);\n      minesArray.push(...minesPool.splice(n, 1));\n    }\n    return minesArray;\n  }\n  function addGridCell(grid, gridCell) {\n    const y = grid.length - 1;\n    const x = grid[y].length;\n    const lastGridCell = gridCell;\n    const neighbours = getNeighbours(grid, y, x);\n    for (let neighbourGridCell of neighbours) {\n      if (lastGridCell.isMine) {\n        neighbourGridCell.n += 1;\n      } else if (neighbourGridCell.isMine) {\n        lastGridCell.n += 1;\n      }\n    }\n    grid[y].push(gridCell);\n  }\n  function revealBoard() {\n    const updatedGrid = grid.map(row => row.map(gridCell => {\n      gridCell.isRevealed = true;\n      return gridCell;\n    }));\n    setGrid(updatedGrid);\n  }\n  function restartBoard() {\n    setGrid(getInitialState());\n  }\n\n  /* Helpers */\n  function getNeighbours(grid, y, x) {\n    const neighbours = [];\n    const currentRow = grid[y];\n    const prevRow = grid[y - 1];\n    const nextRow = grid[y + 1];\n    if (currentRow[x - 1]) neighbours.push(currentRow[x - 1]);\n    if (currentRow[x + 1]) neighbours.push(currentRow[x + 1]);\n    if (prevRow) {\n      if (prevRow[x - 1]) neighbours.push(prevRow[x - 1]);\n      if (prevRow[x]) neighbours.push(prevRow[x]);\n      if (prevRow[x + 1]) neighbours.push(prevRow[x + 1]);\n    }\n    if (nextRow) {\n      if (nextRow[x - 1]) neighbours.push(nextRow[x - 1]);\n      if (nextRow[x]) neighbours.push(nextRow[x]);\n      if (nextRow[x + 1]) neighbours.push(nextRow[x + 1]);\n    }\n    return neighbours;\n  }\n  function revealEmptyNeigbhours(grid, y, x) {\n    const neighbours = [...getNeighbours(grid, y, x)];\n    grid[y][x].isFlagged = false;\n    grid[y][x].isRevealed = true;\n    while (neighbours.length) {\n      const neighbourGridCell = neighbours.shift();\n      if (neighbourGridCell.isRevealed) {\n        continue;\n      }\n      if (neighbourGridCell.isEmpty) {\n        neighbours.push(...getNeighbours(grid, neighbourGridCell.y, neighbourGridCell.x));\n      }\n      neighbourGridCell.isFlagegd = false;\n      neighbourGridCell.isRevealed = true;\n    }\n  }\n  function checkVictory() {\n    const {\n      height,\n      width,\n      mines\n    } = props;\n    const revealed = getRevealed();\n    if (revealed >= height * width - mines) {\n      killBoard(\"win\");\n    }\n  }\n  function getRevealed() {\n    return grid.reduce((r, v) => {\n      r.push(...v);\n      return r;\n    }, []).map(v => v.isRevealed).filter(v => !!v).length;\n  }\n  function killBoard(type) {\n    const message = type === \"lost\" ? \"You lost.\" : \"You won.\";\n    setGrid(prevGrid => {\n      const updatedGrid = prevGrid.map(row => row.map(gridCell => {\n        gridCell.isRevealed = true;\n        return gridCell;\n      }));\n      return {\n        ...prevGrid,\n        gameStatus: message,\n        grid: updatedGrid\n      };\n    });\n  }\n\n  // Cell click handlers\n  function handleLeftClick(y, x) {\n    const updatedGrid = [...grid];\n    const gridCell = updatedGrid[y][x];\n    gridCell.isClicked = true;\n\n    // Might want to add an \"isUnknown\" state later\n    if (gridCell.isRevealed || gridCell.isFlagged) {\n      return false;\n    }\n\n    // End game if mine\n    if (gridCell.isMine) {\n      killBoard(\"lost\");\n      return false;\n    }\n    if (gridCell.isEmpty) {\n      revealEmptyNeigbhours(updatedGrid, y, x);\n    }\n    gridCell.isFlagged = false;\n    gridCell.isRevealed = true;\n    setGrid(updatedGrid, () => {\n      checkVictory();\n    });\n  }\n\n  // Cell right-click handler\n  function handleRightClick(e, y, x) {\n    e.preventDefault();\n    const updatedGrid = [...grid];\n    let minesLeft = grid.minesCount;\n\n    // Check if already revealed\n    if (updatedGrid[y][x].isRevealed) return false;\n    if (updatedGrid[y][x].isFlagged) {\n      updatedGrid[y][x].isFlagged = false;\n      minesLeft++;\n    } else {\n      updatedGrid[y][x].isFlagged = true;\n      minesLeft--;\n    }\n    setGrid(prevGrid => ({\n      ...prevGrid,\n      minesCount: minesLeft\n    }));\n  }\n\n  // Rendering functions\n  function renderBoard() {\n    return grid.map(row => {\n      const rowCells = row.map(gridCell => /*#__PURE__*/_jsxDEV(Cell, {\n        onClick: () => handleLeftClick(gridCell.y, gridCell.x),\n        cMenu: e => handleRightClick(e, gridCell.y, gridCell.x),\n        value: gridCell\n      }, gridCell.y * row.length + gridCell.x, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: rowCells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 14\n      }, this);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mines-count\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Mines: \", grid.minesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"dCwz/7Hzysk14r0t7N52xOKnK8Q=\");\n_c = Board;\nfunction GridCell(y, x, isMine) {\n  this.x = x;\n  this.y = y;\n  this.n = 0;\n  this.isMine = isMine;\n  this.isRevealed = false;\n  this.isFlagged = false;\n  this.isUnknown = false;\n  this.isClicked = false;\n}\n\n// Type checking With PropTypes\n_c2 = GridCell;\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number\n};\nexport default Board;\nvar _c, _c2;\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"GridCell\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Cell","jsxDEV","_jsxDEV","Board","props","_s","grid","setGrid","getInitialState","createNewBoard","minesCount","mines","gameStatus","revealedCells","click","rows","width","columns","height","minesArray","getRandomMines","i","push","j","gridCell","GridCell","includes","addGridCell","amount","starter","limit","minesPool","Array","keys","splice","n","Math","floor","random","length","y","x","lastGridCell","neighbours","getNeighbours","neighbourGridCell","isMine","revealBoard","updatedGrid","map","row","isRevealed","restartBoard","currentRow","prevRow","nextRow","revealEmptyNeigbhours","isFlagged","shift","isEmpty","isFlagegd","checkVictory","revealed","getRevealed","killBoard","reduce","r","v","filter","type","message","prevGrid","handleLeftClick","isClicked","handleRightClick","e","preventDefault","minesLeft","renderBoard","rowCells","onClick","cMenu","value","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","isUnknown","_c2","propTypes","number","$RefreshReg$"],"sources":["/Users/jasminezeng/Downloads/jasmine_ironfly/my-app/src/components/Board.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"./Cell\";\n\nfunction Board(props) {\n  const [grid, setGrid] = useState(getInitialState());\n\n  function getInitialState() {\n    return {\n      grid: createNewBoard(),\n      minesCount: props.mines,\n      gameStatus: props.gameStatus,\n      revealedCells: 0\n    };\n  }\n\n  // Board utilities\n  function createNewBoard(click = null) {\n    const grid = [];\n    const rows = props.width;\n    const columns = props.height;\n    const minesCount = props.mines;\n    const minesArray = getRandomMines(minesCount, columns, rows, click);\n\n    for (let i = 0; i < columns; ++i) {\n      grid.push([]);\n      for (let j = 0; j < rows; ++j) {\n        const gridCell = new GridCell(i, j, minesArray.includes(i * rows + j));\n        addGridCell(grid, gridCell);\n      }\n    }\n\n    return grid;\n  }\n\n  function getRandomMines(amount, columns, rows, starter = null) {\n    const minesArray = [];\n    const limit = columns * rows;\n    const minesPool = [...Array(limit).keys()];\n\n    if (starter > 0 && starter < limit) {\n      minesPool.splice(starter, 1);\n    }\n\n    for (let i = 0; i < amount; ++i) {\n      const n = Math.floor(Math.random() * minesPool.length);\n      minesArray.push(...minesPool.splice(n, 1));\n    }\n\n    return minesArray;\n  }\n\n  function addGridCell(grid, gridCell) {\n    const y = grid.length - 1;\n    const x = grid[y].length;\n    const lastGridCell = gridCell;\n    const neighbours = getNeighbours(grid, y, x);\n\n    for (let neighbourGridCell of neighbours) {\n      if (lastGridCell.isMine) {\n        neighbourGridCell.n += 1;\n      } else if (neighbourGridCell.isMine) {\n        lastGridCell.n += 1;\n      }\n    }\n\n    grid[y].push(gridCell);\n  }\n\n  function revealBoard() {\n    const updatedGrid = grid.map(row =>\n      row.map(gridCell => {\n        gridCell.isRevealed = true;\n        return gridCell;\n      })\n    );\n\n    setGrid(updatedGrid);\n  }\n\n  function restartBoard() {\n    setGrid(getInitialState());\n  }\n\n  /* Helpers */\n  function getNeighbours(grid, y, x) {\n    const neighbours = [];\n    const currentRow = grid[y];\n    const prevRow = grid[y - 1];\n    const nextRow = grid[y + 1];\n\n    if (currentRow[x - 1]) neighbours.push(currentRow[x - 1]);\n    if (currentRow[x + 1]) neighbours.push(currentRow[x + 1]);\n    if (prevRow) {\n      if (prevRow[x - 1]) neighbours.push(prevRow[x - 1]);\n      if (prevRow[x]) neighbours.push(prevRow[x]);\n      if (prevRow[x + 1]) neighbours.push(prevRow[x + 1]);\n    }\n    if (nextRow) {\n      if (nextRow[x - 1]) neighbours.push(nextRow[x - 1]);\n      if (nextRow[x]) neighbours.push(nextRow[x]);\n      if (nextRow[x + 1]) neighbours.push(nextRow[x + 1]);\n    }\n\n    return neighbours;\n  }\n\n  function revealEmptyNeigbhours(grid, y, x) {\n    const neighbours = [...getNeighbours(grid, y, x)];\n    grid[y][x].isFlagged = false;\n    grid[y][x].isRevealed = true;\n\n    while (neighbours.length) {\n      const neighbourGridCell = neighbours.shift();\n\n      if (neighbourGridCell.isRevealed) {\n        continue;\n      }\n      if (neighbourGridCell.isEmpty) {\n        neighbours.push(\n          ...getNeighbours(grid, neighbourGridCell.y, neighbourGridCell.x)\n        );\n      }\n\n      neighbourGridCell.isFlagegd = false;\n      neighbourGridCell.isRevealed = true;\n    }\n  }\n\n  function checkVictory() {\n    const { height, width, mines } = props;\n    const revealed = getRevealed();\n\n    if (revealed >= height * width - mines) {\n      killBoard(\"win\");\n    }\n  }\n\n  function getRevealed() {\n    return grid\n      .reduce((r, v) => {\n        r.push(...v);\n        return r;\n      }, [])\n      .map(v => v.isRevealed)\n      .filter(v => !!v).length;\n  }\n\n  function killBoard(type) {\n    const message = type === \"lost\" ? \"You lost.\" : \"You won.\";\n\n    setGrid(prevGrid => {\n      const updatedGrid = prevGrid.map(row =>\n        row.map(gridCell => {\n          gridCell.isRevealed = true;\n          return gridCell;\n        })\n      );\n      return { ...prevGrid, gameStatus: message, grid: updatedGrid };\n    });\n  }\n\n  // Cell click handlers\n  function handleLeftClick(y, x) {\n    const updatedGrid = [...grid];\n    const gridCell = updatedGrid[y][x];\n\n    gridCell.isClicked = true;\n\n    // Might want to add an \"isUnknown\" state later\n    if (gridCell.isRevealed || gridCell.isFlagged) {\n      return false;\n    }\n\n    // End game if mine\n    if (gridCell.isMine) {\n      killBoard(\"lost\");\n      return false;\n    }\n\n    if (gridCell.isEmpty) {\n      revealEmptyNeigbhours(updatedGrid, y, x);\n    }\n\n    gridCell.isFlagged = false;\n    gridCell.isRevealed = true;\n\n    setGrid(updatedGrid, () => {\n      checkVictory();\n    });\n  }\n\n  // Cell right-click handler\n  function handleRightClick(e, y, x) {\n    e.preventDefault();\n    const updatedGrid = [...grid];\n    let minesLeft = grid.minesCount;\n\n    // Check if already revealed\n    if (updatedGrid[y][x].isRevealed) return false;\n\n    if (updatedGrid[y][x].isFlagged) {\n      updatedGrid[y][x].isFlagged = false;\n      minesLeft++;\n    } else {\n      updatedGrid[y][x].isFlagged = true;\n      minesLeft--;\n    }\n\n    setGrid(prevGrid => ({\n      ...prevGrid,\n      minesCount: minesLeft\n    }));\n  }\n\n  // Rendering functions\n  function renderBoard() {\n    return grid.map(row => {\n      const rowCells = row.map(gridCell => (\n        <Cell\n          key={gridCell.y * row.length + gridCell.x}\n          onClick={() => handleLeftClick(gridCell.y, gridCell.x)}\n          cMenu={e => handleRightClick(e, gridCell.y, gridCell.x)}\n          value={gridCell}\n        />\n      ));\n\n      return <div className=\"row\">{rowCells}</div>;\n    });\n  }\n\n  return (\n    <div className=\"board\">\n      <div className=\"mines-count\">\n        <span>Mines: {grid.minesCount}</span>\n      </div>\n      <div className=\"grid\">{renderBoard()}</div>\n    </div>\n  );\n}\n\nfunction GridCell(y, x, isMine) {\n  this.x = x;\n  this.y = y;\n  this.n = 0;\n  this.isMine = isMine;\n  this.isRevealed = false;\n  this.isFlagged = false;\n  this.isUnknown = false;\n  this.isClicked = false;\n}\n\n// Type checking With PropTypes\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}